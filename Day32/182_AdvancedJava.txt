Last Lecture Agenda
1 Spring MVC
	- m => Model=> data => entity class  , V= > View/Template , C=> controller
2 What is MVC
- MVC -- Design pattern -- Common in enterprise web apps.
	- MVC using JSP, Java Beans & Servlet Controller:
		+ M - Model: -- Java Bean.
			- POJOs + Data Handling
			- POJO class (user defined)
			- Data carrier -- Typically doesn't have BL or DB connectivity.
		+ V - View: -- Web page (html, jsp, ...) (user defined)
			- Data Represenation
		+ C - Controller: -- Servlet.
			- Navigation, Coupling betn Models & Views.
			- It has two types: Front Controller & Controller(s)
			1 Front Controller: (spring mvc framework)
				- org.springframework.web.servlet.DispatcherServlet
				- create spring application context (WebApplicationContext).
					
					- maps the incoming req to corresponding req handling method.
					- getting req data from incoming req & injecting it into req handling method (as arg) -- as primitive types or model object.
					- provide validation facilties.
					- navigating to the next web component (view or another req handler method).
					- transferring data from req handler method to the view.
					- making state management/security/localization objects available into req handler.
			2 Controller(s): (user defined) 
				- implementation of req handler methods.
	- WebApplicationContext:
		- Each spring web appln needs at least one WebApplicationContext.
		- In simple spring mvc web application, the dispatcher servlet is responsible for creating spring webapplicationcontext. This context is responsible for MVC as well as DI.

3 Difference between Spring & Spring Boot 
Spring 
 1 Spring is Freamwork
 2 You have to create explicitly IOC Container
 3 If you work with mvc or REST API then you need to configure tomcat server by yourself.
 
Spring Boot
1 It is  tool which makes the work easier to create ready to run application.
2 IOC Container is create automatically we don't required to create explicitly.
3 Where as in Spring Boot it is embedded tomact server in it. It is making your life easier.

4 How to implement MVC 

summary & Interview Questions
1 What is MVC
2 How to implement MVC 
3 What is Spring MVC

Today's Lecture Agenda
1 Jsp Introduction
 - It is A front End Technology
 - It is Java Specific platform 
  JSP are out-dated -- still used in old applications.
	- JSP only Support 3 methods
		1 GET 2 POST 3 HEAD
	- JSP = Presentation Logic* + Business Logic
	- JSP is front-end technology i.e. web ui.
* JSP is converted into the servlet during execution.
	- JSP page -- .jsp
	- It Contain HTML tags + JSP tags + Custom tags + Java code
	* Writing/Embedding Java code in JSP pages is "worst" practice.
	* Best practice is to use "Java Beans" with JSP pages for BL. 	
JSP Tags
	JSP Syntax:
    - Contains markup: HTML tags, JSP tags, Custom tags.
	- Server side code (Java) -- will be executed on server -- not sent to client.
	-  some basic tags as follow
	  a. Directive: Defines behaviour of JSP (generated servlet).
		- It define structure of page
		
		import java.lang.util.*
		
			- <%@ page ... %> - Page Directive			
			   - In page directive you can use various attribute to give more info about the page like
			     1 language="java"
				 2 contentType="text/html"
				 3 import="packagename.classname" here you can import one or more package at a time only use comma seperatated
				 4 isErrorPage="true"
				 
			- <%@ include ... %>			
			   1 If we have to add some static content in our page we use include directive
			   2 Basically we add an HTML content because it is static
			   3 Generally we use Header,footer, nav bar or any Other universal content etc.
			   
			- <%@ taglib ... %> - JSP Custom Lib 
			   1 Declares a tag library, containing custom actions, used in the page
			  
		b. Declaration: 
		    - Java code (fields/methods) to be added in generated servlet.
			-  you will most often find declaration tags working in combination with expression or scriptlet tags
			- It is used generally declare variable & methods(Signature(retrun type ,name ,parameter ) + Defination)
			- Syntax  <%! int a=10; // Forward Declaration & Defination 
					public void test(){
					......
					}
				
			%>
			- In declaration tag after every statement we required to use ';'
		c. Scriptlet: 
			- Java code to be executed per request i.e. to be added in service() method.
			- If variable declare its scope in jsp service method
			- To write a Business logic/Call BL
			- Syntax <% a++; %>
			- In scriptlet tag after every statement we required to use ';'
		d. Expression
			- Java expression (that evaluates to some value) whose result is added in generated response (writer).
			- To excute an expression or to simply print actual value.
			- Syntax  <%=a  %>
			- In expression tag don't use ';'
		e. Comment
			- Server side comment, which is discarded during processing and not visible to client.
			- If you want use jsp comment you can use it.
			- <%-- ... --%>
			
3 Implicit Object
JSP Implicit objects:
	- Local variables of jspService() methods & hence directly accessible in request handling stage i.e. scriptlets & expressions.
	- When JSP Page gets compiled it gets translated into corresponding sevlet at that time it creates few objects they are known as implicit object of JSP
	- request: HttpServletRequest (Main)
	- response: HttpServletResponse (Main)
	- session: HttpSession (Main)
	- config: ServletConfig
	- application: ServletContext
	- out: JspWriter (PrintWriter) (Main)
	- page: Object (this pointer)
	- pageContext: PageContext (state management in JSP) - This encapsulates use of server-specific features like higher performance JspWriters.
	- exception: Throwable -- only for custom error pages - JSP.
		<%@ page isErrorPage="true" %> (Main)
4 JSP Implementation


summary & Interview Questions
1 What is JSP 
2 Explain JSP tags
3 How to use tags 
4 Explain  implicit Object in JSP 
